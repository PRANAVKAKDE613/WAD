import random
import math
import matplotlib.pyplot as plt



#defining n-queens

def print_board(state):
    n = len(state)
    board = [['.' for _ in range(n)] for _ in range(n)]
    for col, row in enumerate(state):
        board[row][col] = 'Q'
    for row in board:
        print(' '.join(row))
    print()



#Heuristic function

def heuristic(state):
    h = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                h += 1
    return h


#hill climbing algo

def hill_climbing(n):
    current = [random.randint(0, n - 1) for _ in range(n)]
    current_h = heuristic(current)

    while True:
        neighbors = []
        for col in range(n):
            for row in range(n):
                if row != current[col]:
                    neighbor = current.copy()
                    neighbor[col] = row
                    neighbors.append((neighbor, heuristic(neighbor)))

        neighbors.sort(key=lambda x: x[1])
        best_neighbor, best_h = neighbors[0]

        if best_h >= current_h:
            return current, current_h

        current = best_neighbor
        current_h = best_h


# stimulated annealing alo

def simulated_annealing(n, max_steps=10000, temp=100):
    current = [random.randint(0, n - 1) for _ in range(n)]
    current_h = heuristic(current)

    for step in range(max_steps):
        if current_h == 0:
            break
        col = random.randint(0, n - 1)
        row = random.randint(0, n - 1)
        neighbor = current.copy()
        neighbor[col] = row
        neighbor_h = heuristic(neighbor)

        delta = neighbor_h - current_h
        prob = math.exp(-delta / temp) if delta > 0 else 1

        if random.random() < prob:
            current = neighbor
            current_h = neighbor_h

        temp *= 0.99  # cooling

    return current, current_h


n = 8  # You can change this to any N

print("ğŸ”¹ Hill Climbing Solution:")
sol_hc, h_hc = hill_climbing(n)
print_board(sol_hc)
print("Heuristic:", h_hc)

print("ğŸ”¹ Simulated Annealing Solution:")
sol_sa, h_sa = simulated_annealing(n)
print_board(sol_sa)
print("Heuristic:", h_sa)




import numpy as np

def calculate_distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))
    #linalg.norm() is ecledian distance formula underroot/(x1-x2)^2 + (y1-y2)^2 

def calculate_distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))
    #linalg.norm() is ecledian distance formula underroot/(x1-x2)^2 + (y1-y2)^2 

def nearest_neighbor_tsp(cities):
    n = len(cities)
    visited = [False] * n #array of total no of cities with false value 
    path = []
    total_distance = 0

    current_index = 3  # Start at the first city
    path.append(current_index)
    visited[current_index] = True

    for _ in range(n - 1):
        nearest = None
        min_distance = float('inf') #infinity
        for i in range(n):
            if not visited[i]:
                dist = calculate_distance(cities[current_index], cities[i])
                if dist < min_distance:
                    min_distance = dist
                    nearest = i
        visited[nearest] = True
        path.append(nearest)
        total_distance += min_distance
        current_index = nearest

    # Return to starting city
    total_distance += calculate_distance(cities[current_index], cities[path[0]])
    path.append(path[0])  # Complete the tour

    return path, total_distance

if __name__ == "__main__":
    cities = [(0, 0), (2, 3), (5, 4), (1, 1), (6, 1)]
    path, distance = nearest_neighbor_tsp(cities)
    print("Visited Path (by index):", path)
    print("Total Distance:", round(distance, 2))

